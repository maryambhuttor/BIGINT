/*
 * A class for objects that represent non-negative integers of 
 * up to 20 digits.
 */

public class BigInt  {
    // the maximum number of digits in a BigInt -- and thus the length
    // of the digits array
    private static final int SIZE = 20;
    
    // the array of digits for this BigInt object
    private int[] digits;
    
    // the number of significant digits in this BigInt object
    private int numSigDigits;

    private int at(int place)
    //helper method, to put the digit in the right
    {
        return digits[SIZE-1-place];
    }

    private void put(int value, int place)
    //number and its position is passed in, and it correctly puts in the right place. 
    {
        if(place >= SIZE)
        {
            throw new ArithmeticException();
        }

        if(value > 9)
        {
            throw new IllegalArgumentException();
        }
        digits[SIZE-1-place] = value;
    }
    

    /*
     * Default, no-argument constructor -- creates a BigInt that 
     * represents the number 0.
     */
    public BigInt() {
        this.digits = new int[SIZE];        
        this.numSigDigits = 1;  // 0 has one sig. digit--the rightmost 0!
    }

    public BigInt(int[] arr){
    //It should use the contents of the array that is passed in as the basis of the new BigInt object.    
        if (arr == null ||
            !(arr.length >= 0 && arr.length <= SIZE)
             ){
            throw new IllegalArgumentException();
        }
        for(int i = 0; i < arr.length; i++) {
            if (arr[i] < 0){
                throw new IllegalArgumentException();
            }

        }

        this.digits = new int[SIZE];
        
        int place = 0;
        for (int i = arr.length - 1; i >=0 ; i--){
            this.put(arr[i], place);           
            place++;
        }

        this.numSigDigits = 1;
        for (int i = 1; i < arr.length; i++) {
            if (this.at(i) != 0 ){
                this.numSigDigits = i+1;
            } 
        }
    
    }
    public int getNumSigDigits(){
    //returning the number of signifcant digits
    return this.numSigDigits;    
    }
    
    public String toString(){
    //hould return a string that can be used to print a BigInt object in the way that we would j
    //ordinarily write the corresponding integerâ€”with no leading zeroes.    
        String result = "";
        for(int i = this.numSigDigits-1; i>=0; i--) {
                result += this.at(i);  
        }

        return result;      
   
    }


    public BigInt(int n){
    //A constructor that creates a BigInt object representing the integer n.     
        if (n < 0){
            throw new IllegalArgumentException("Please input a number greater than or equal to 0");
        }         
        this.digits = new int[SIZE];
        this.numSigDigits = 0;
        while(n > 0) {
            this.digits[SIZE-numSigDigits-1] = n%10;
            n = n / 10;
            this.numSigDigits++;
        }     
        if(this.numSigDigits == 0){
            this.numSigDigits++;
        }
        
    }
    
    public int compareTo(BigInt other){
        if (other == null){
        throw new IllegalArgumentException();   
        }
        
        //compare 2 big ints

        //return -1 if this < other
        if(this.numSigDigits < other.numSigDigits){
            return -1;
        }


        //return 1 if this > other
        if(this.numSigDigits > other.numSigDigits){
            return 1;
        }
        
        //return 0 if this == other
        for(int x = this.numSigDigits; x > 0; x--){
            if(this.digits[SIZE-x] < other.digits[SIZE-x]){
                return -1;
            }
            if(this.digits[SIZE-x] > other.digits[SIZE-x] ){
                return 1;
            }
        }

        return 0;


    }

    public BigInt add(BigInt other){
    //This method should create and return a new 
    //BigInt object for the sum of the integers represented by the called object and other    
        BigInt result = new BigInt();
        
        if (other == null){
            throw new IllegalArgumentException();
        }
        
        int carry = 0 ; 
        for(int i=0; i<SIZE; i++)
        {
            int sum = this.at(i) + other.at(i) + carry;
            result.put(sum % 10, i); 
            carry =    sum / 10 ;   
            if(sum % 10 != 0) result.numSigDigits = i+1;
        }
        
        if(carry != 0 ){  
            throw new ArithmeticException(); 
        }
        return result;
    }
    
    public BigInt mul(BigInt other){  
    //This method should create and return a 
    //new BigInt object for the product of the integers represented by the called object and other. 

    
        if(other == null){
            throw new IllegalArgumentException();
        }

        BigInt final_result = new BigInt();

        // loop index = 0 --> first sig fig 
        for(int i=0; i < this.numSigDigits; i++)
        {
            for(int j = 0; j < other.numSigDigits; j++)
            {
                BigInt big_result =  new BigInt();
                int place = i+j;  // This tells where the multiplication output should go in final result
                int result = this.at(i) * other.at(j); 
                int carry = result / 10;  //carry from digit multiplication
                result =  result%10; 
                big_result.put(result,place);
                if(carry != 0){
                 big_result.put(carry,place+1);    
                }
                final_result = final_result.add(big_result);
            }
        }

        return final_result;
    }


   
    
    public static void main(String [] args) {
        System.out.println("Unit tests for the BigInt class.");
        System.out.println();

        /* 
         * You should uncomment and run each test--one at a time--
         * after you build the corresponding methods of the class.
         */
        
        System.out.println("Test 1: result should be 7");
        int[] a1 = { 1,2,3,4,5,6,7 };
        BigInt b1 = new BigInt(a1);
        System.out.println(b1.getNumSigDigits());
        System.out.println();

        
        System.out.println("Test 2: result should be 1234567");
        b1 = new BigInt(a1);
        System.out.println(b1);
        System.out.println();
        
        System.out.println("Test 3: result should be 0");
        int[] a2 = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
        BigInt b2 = new BigInt(a2);
        System.out.println(b2);
        System.out.println();
        
        System.out.println("Test 4: should throw an IllegalArgumentException");
        try {
            int[] a3 = { 0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
            BigInt b3 = new BigInt(a3);
            System.out.println("Test failed.");
        } catch (IllegalArgumentException e) {
            System.out.println("Test passed.");
        } catch (Exception e) {
            System.out.println("Test failed: threw wrong type of exception.");
        }
        System.out.println();

        System.out.println("Test 5: result should be 1234567");
        b1 = new BigInt(1234567);
        System.out.println(b1);
        System.out.println();

        System.out.println("Test 6: result should be 0");
        b2 = new BigInt(0);
        System.out.println(b2);
        System.out.println();

        System.out.println("Test 7: should throw an IllegalArgumentException");
        try {
            BigInt b3 = new BigInt(-4);
            System.out.println("Test failed.");
        } catch (IllegalArgumentException e) {
            System.out.println("Test passed.");
        } catch (Exception e) {
            System.out.println("Test failed: threw wrong type of exception.");
        }
        System.out.println();

        System.out.println("Test 8: result should be 0");
        b1 = new BigInt(12375);
        b2 = new BigInt(12375);
        System.out.println(b1.compareTo(b2));
        System.out.println();

        System.out.println("Test 9: result should be -1");
        b2 = new BigInt(12378);
        System.out.println(b1.compareTo(b2));
        System.out.println();

        System.out.println("Test 10: result should be 1");
        System.out.println(b2.compareTo(b1));
        System.out.println();

        System.out.println("Test 11: result should be 0");
        b1 = new BigInt(0);
        b2 = new BigInt(0);
        System.out.println(b1.compareTo(b2));
        System.out.println();

        System.out.println("Test 12: result should be\n123456789123456789");
        int[] a4 = { 3,6,1,8,2,7,3,6,0,3,6,1,8,2,7,3,6 };
        int[] a5 = { 8,7,2,7,4,0,5,3,0,8,7,2,7,4,0,5,3 };
        BigInt b4 = new BigInt(a4);
        BigInt b5 = new BigInt(a5);
        
        BigInt sum = b4.add(b5);
        System.out.println(sum);
        System.out.println();

        System.out.println("Test 13: result should be\n123456789123456789");
        System.out.println(b5.add(b4));
        System.out.println();

        System.out.println("Test 14: result should be\n3141592653598");
        b1 = new BigInt(0);
        int[] a6 = { 3,1,4,1,5,9,2,6,5,3,5,9,8 };
        b2 = new BigInt(a6);
        System.out.println(b1.add(b2));
        System.out.println();

        System.out.println("Test 15: result should be\n10000000000000000000");
        int[] a19 = { 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 };    // 19 nines!
        b1 = new BigInt(a19);
        b2 = new BigInt(1);
        System.out.println(b1.add(b2));
        System.out.println();

        System.out.println("Test 16: should throw an ArithmeticException");
        int[] a20 = { 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 };  // 20 nines!
        try {
            b1 = new BigInt(a20);
            System.out.println(b1.add(b2));
        } catch (ArithmeticException e) {
            System.out.println("Test passed.");
        } catch (Exception e) {
            System.out.println("Test failed: threw wrong type of exception.");
        }
        System.out.println();

        System.out.println("Test 17: result should be 5670");
        b1 = new BigInt(135);
        b2 = new BigInt(42);
        BigInt product = b1.mul(b2);
        System.out.println(product);
        System.out.println();

     
        System.out.println("Test 19: should throw an ArithmeticException");
        try {
            b1 = new BigInt(a20);
            b2 = new BigInt(2);
            System.out.println(b1.mul(b2));
        } catch (ArithmeticException e) {
            System.out.println("Test passed.");
        } catch (Exception e) {
            System.out.println("Test failed: threw wrong type of exception.");
        }
        System.out.println();
        

   System.out.println("Test 18: result should be\n99999999999999999999");
        b1 = new BigInt(a20);   // 20 nines -- see above
        b2 = new BigInt(1);
        System.out.println(b2);
        System.out.println(b1.mul(b2));
        System.out.println();

    }
}
